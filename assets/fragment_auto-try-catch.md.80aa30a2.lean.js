import{_ as a,o as l,c as p,a as n,b as s}from"./app.f983686f.js";const d=JSON.parse('{"title":"如何给所有的 async 函数添加 try/catch？","description":"","frontmatter":{},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"async 如果不加 try/catch 会发生什么事？","slug":"async-如果不加-try-catch-会发生什么事","link":"#async-如果不加-try-catch-会发生什么事","children":[]},{"level":2,"title":"babel 插件的最终效果","slug":"babel-插件的最终效果","link":"#babel-插件的最终效果","children":[]},{"level":2,"title":"babel 插件的实现思路","slug":"babel-插件的实现思路","link":"#babel-插件的实现思路","children":[]},{"level":2,"title":"babel 的核心：AST","slug":"babel-的核心-ast","link":"#babel-的核心-ast","children":[]},{"level":2,"title":"常用的 AST 节点类型对照表","slug":"常用的-ast-节点类型对照表","link":"#常用的-ast-节点类型对照表","children":[]},{"level":2,"title":"await 节点对应的 AST 结构","slug":"await-节点对应的-ast-结构","link":"#await-节点对应的-ast-结构","children":[]},{"level":2,"title":"babel 插件开发","slug":"babel-插件开发","link":"#babel-插件开发","children":[{"level":3,"title":"插件的基本格式示例","slug":"插件的基本格式示例","link":"#插件的基本格式示例","children":[]},{"level":3,"title":"寻找 await 节点","slug":"寻找-await-节点","link":"#寻找-await-节点","children":[]},{"level":3,"title":"向上查找 async 函数","slug":"向上查找-async-函数","link":"#向上查找-async-函数","children":[]},{"level":3,"title":"利用 babel-template 生成 try/catch 节点","slug":"利用-babel-template-生成-try-catch-节点","link":"#利用-babel-template-生成-try-catch-节点","children":[]},{"level":3,"title":"async 函数体替换成 try 语句","slug":"async-函数体替换成-try-语句","link":"#async-函数体替换成-try-语句","children":[]},{"level":3,"title":"若函数已存在 try/catch，则不处理","slug":"若函数已存在-try-catch-则不处理","link":"#若函数已存在-try-catch-则不处理","children":[]},{"level":3,"title":"添加报错信息","slug":"添加报错信息","link":"#添加报错信息","children":[]},{"level":3,"title":"添加用户选项","slug":"添加用户选项","link":"#添加用户选项","children":[]},{"level":3,"title":"最终代码","slug":"最终代码","link":"#最终代码","children":[]}]}],"relativePath":"fragment/auto-try-catch.md","lastUpdated":1713238328000}'),o={name:"fragment/auto-try-catch.md"},e=n("",35),c=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"类型原名称"),s("th",null,"中文名称"),s("th",null,"描述")])]),s("tbody",null,[s("tr",null,[s("td",null,"Program"),s("td",null,"程序主体"),s("td",null,"整段代码的主体")]),s("tr",null,[s("td",null,"VariableDeclaration"),s("td",null,"变量声明"),s("td",null,"声明一个变量，例如 var let const")]),s("tr",null,[s("td",null,[s("code",null,"FunctionDeclaration")]),s("td",null,"函数声明"),s("td",null,"声明一个函数，例如 function")]),s("tr",null,[s("td",null,"ExpressionStatement"),s("td",null,"表达式语句"),s("td",null,"通常是调用一个函数，例如 console.log()")]),s("tr",{var:"",a:""},[s("td",null,"BlockStatement"),s("td",null,"块语句"),s("td",null,"包裹在 {} 块内的代码，例如 if (condition)")]),s("tr",null,[s("td",null,"BreakStatement"),s("td",null,"中断语句"),s("td",null,"通常指 break")]),s("tr",null,[s("td",null,"ContinueStatement"),s("td",null,"持续语句"),s("td",null,"通常指 continue")]),s("tr",null,[s("td",null,"ReturnStatement"),s("td",null,"返回语句"),s("td",null,"通常指 return")]),s("tr",null,[s("td",null,"SwitchStatement"),s("td",null,"Switch 语句"),s("td",null,"通常指 Switch Case 语句中的 Switch")]),s("tr",null,[s("td",null,"IfStatement"),s("td",null,"If 控制流语句"),s("td",null,"控制流语句，通常指 if(condition){}else{}")]),s("tr",null,[s("td",null,"Identifier"),s("td",null,"标识符"),s("td",null,"标识，例如声明变量时 var identi = 5 中的 identi")]),s("tr",null,[s("td",null,"CallExpression"),s("td",null,"调用表达式"),s("td",null,"通常指调用一个函数，例如 console.log()")]),s("tr",null,[s("td",null,"BinaryExpression"),s("td",null,"二进制表达式"),s("td",null,"通常指运算，例如 1+2")]),s("tr",null,[s("td",null,"MemberExpression"),s("td",null,"成员表达式"),s("td",null,"通常指调用对象的成员，例如 console 对象的 log 成员")]),s("tr",null,[s("td",null,"ArrayExpression"),s("td",null,"数组表达式"),s("td",null,"通常指一个数组，例如 [1, 3, 5]")]),s("tr",null,[s("td",null,[s("code",null,"FunctionExpression")]),s("td",null,"函数表达式"),s("td",null,"例如 const func = function () {}")]),s("tr",null,[s("td",null,[s("code",null,"ArrowFunctionExpression")]),s("td",null,"箭头函数表达式"),s("td",null,"例如 const func = ()=> {}")]),s("tr",null,[s("td",null,[s("code",null,"AwaitExpression")]),s("td",null,"await 表达式"),s("td",null,"例如 let val = await f()")]),s("tr",null,[s("td",null,[s("code",null,"ObjectMethod")]),s("td",null,"对象中定义的方法"),s("td",null,"例如 let obj = { fn ()")]),s("tr",null,[s("td",null,"NewExpression"),s("td",null,"New 表达式"),s("td",null,"通常指使用 New 关键词")]),s("tr",null,[s("td",null,"AssignmentExpression"),s("td",null,"赋值表达式"),s("td",null,"通常指将函数的返回值赋值给变量")]),s("tr",null,[s("td",null,"UpdateExpression"),s("td",null,"更新表达式"),s("td",null,"通常指更新成员值，例如 i++")]),s("tr",null,[s("td",null,"Literal"),s("td",null,"字面量"),s("td",null,"字面量")]),s("tr",null,[s("td",null,"BooleanLiteral"),s("td",null,"布尔型字面量"),s("td",null,"布尔值，例如 true false")]),s("tr",null,[s("td",null,"NumericLiteral"),s("td",null,"数字型字面量"),s("td",null,"数字，例如 100")]),s("tr",null,[s("td",null,"StringLiteral"),s("td",null,"字符型字面量"),s("td",null,"字符串，例如 vansenb")]),s("tr",null,[s("td",null,"SwitchCase"),s("td",null,"Case 语句"),s("td",null,"通常指 Switch 语句中的 Case")])])],-1),t=n("",50),r=[e,c,t];function B(y,F,i,A,u,b){return l(),p("div",null,r)}const m=a(o,[["render",B]]);export{d as __pageData,m as default};
